<!-- Commit Log -->
- 2021.04.28. WorkSpace(0.1) - [ 템플릿 적용 및 정리 ]
Frontend: BootStrapVue Argon DashBoard
Backend: express-generator
Template: UserProfile 구조정리 및 이해 (
    1. AuthLayout.vue
    2. Login.Vue
    3. Register.vue
    4. UserProfile.vue
)


- 2021.04.28. WorkSpace(0.2) - [ 모듈 추가 및 적용 ]
Frontend: vuex, axios
Backend: mysql, connect-history-api-fallback


- 2021.04.28. WorkSpace(0.3) - [ 파일 및 템플릿 정리 ]
Frontend: README.md, ISSUE_TEMPLATE.md, CHANGELOG.md, src -> util 삭제

Template: 템플릿 정리 및 이해하기 (
    1. Dashboard.vue: Projects Content가 들어갈 공간정리
    2. DarkTable.vue: 테스트 후 WhiteTable.vue로 사용 유무 결정
    3. AuthLayout.vue: Login.vue와 Register.vue의 Nav와 Footer가 포함되어 있음.
)


- 2021.04.29. WorkSpace(0.4) - [ 템플릿 라우터 테스트 및 정리 ]
Template: 라우터 변경 (
    routers.js (
        '/'
        '/login'
        '/DashBoard
        ...
    )
)


- 2021.04.29. WorkSpace(0.5) - [ Login.vue & Register.vue 정규식 적용 및 SweetAlret2사용 ]
    1. 한글정규식
    2. 영어숫자정규식
    3. 공백정규식
    4. 빈칸정규식
    5. SweetAlret2 경고창 적용


- 2021.04.29. WorkSpace(0.6) - [ Submit 시도 후 실패시 남아있는 Data값 제거 ]
    1. location.reload(); 적용
    2. axios를 사용한, Restful API 요청 생성


- 2021.04.29. WorkSpace(0.7) - [ DataBase & Table ]
    1. DataBase 생성 및 테이블 정의


- 2021. 04.30. WorkSpace(0.8) - [ Webpack-build ]
    1. 각 오류 구문에 /* eslint-disable */ 기입. - ( new TestObject(); 와 같은 .. 에라이 그냥 이거 쓰면 웹펙 build 오류가 사라진다. <script></script>의 최상단에 기입하면 된다. )
    2. intelij.Webpack.js 라는 쓸데없는 파일을 제거 - ( Webpack에는 전혀 영향을 주지 않는다. )
    3. Vue.config.js에서 Webpack의 경로를 설정이 가능한 것 같다.
    4. 기존의 웹팩 결과물의 경로가 "/Frontent/dist/index.html"이였지만, -> "/Backend/public/index.html"로 바꿔주었다. ( 서버에서 요청을 주고받을 수 있게 되었다. )
    5. Server Config 설정 (IP, Port, URL. User_Router)


- 2021. 04.30. WorkSpace(0.9) - [ /loginTry & /registerTry 라우터 설정 ]
    1. Connection error: net::ERR_CONNECTION_REFUSED -> 서버를 실행하지 않고, 있을 때 크롬부라우저에서 발생하는 오류 문구이다. 당황하지말자.
    2. /loginTry & /registerTry 라우터 설정


- 2021. 04.30. WorkSpace(0.91) - [ DataBase폴더 생성 및 Log정리 ]
    1. Rsgister.vue, Login.vue - console.log(); 정리
    2. DataBase 폴더 생성 및 임시 데이터 값 JSON파일과 SQL문 저장


- 2021. 05.04. WorkSpace(1.0) - [ SetData & GetData ]
    1. axios로 데이터를 보내고, 받을 수 있음.
    2. axios 데이터를 보낼 때, 데이터 객체의 키값은 자동으로 html의 name이 됨.
    3. express에서 요청자가 보낸 데이터 값을 가져올 때, body-parser를 사용.
    4. express에서 요청자에게 결과 값을 res.send로 응답.
    5. 응답된 결과 값은 axios.than(response)로 전달 받는다.


- 2021. 05.04. WorkSpace(1.01) - [ SweetAlret2 일부 수정 ]
    1. 미적용 되있던, alert에 SweetAlret2로 모두 적용 후 빌드


- 2021. 05.04. Sign UP - [ 회원가입 ]
    1. 데이터 중복 방지
    2. 테이터 중복 시 경고 알림


- 2021. 05.06. Sign IN - [ 로그인 & 메인 페이지 이동 ]
    1. 데이터 일치 확인
    2. 테이터 불일치 시 경고 알림
    3. 확인여부에 따라서 메인 페이지(Dashboard)로 이동


- 2021. 05.06. Clean Code 1 - [ Clean Code 1 및 구조 이해 ]
    1. Clean Code
    2. 구조 이해하기
    3. Logo 링크 일부 변경


- 2021. 05.06. Cookie - [ Cookie값을 활용한 URL접속 차단 ]
    1. 로그인에 성공하면, res.cookie('status', true, { max: 10000 }) 라는 쿠키를 얻게 됨
    2. 쿠키 값의 일치여부에 따라 컴포넌트 이동이 가능하도록 함

    
- 2021. 05.06. 페이지정리 - [ 메인페이지에 켈린더 생성 및 적용 (실패) ]
    1. /DashBoard & /table -> /projects & /add 로 변경
    2. 상단 타이틀 명칭 변경 ( PROJECTS, ADD )
    3. 불필요한 파일 삭제 및 코드 정리
    4. 테이블(Add) 컴포넌트 정리
    5. 뷰-켈린더 적용 (
        (1). 뷰 부트스트랩을 활용하였는가?
        (2). 기능면에서 이미 충분히 구현되어있는가?
        (3). 모바일 환경에서도 반응형 화면이 적용이 되는가?
        
        위 3가지의 기준에 부합하는 Vue-bootstrap-calendar을 찾았지만, 적용하기 까다롭거나 3번에 해당되지 않았다.
        마지막에 다다라서야 모두 부합하는 것을 찾았지만, 적용하는 방법에 애를 먹고 있다. 시간상 실패하였으나 여러 가지, 코드 정리와 파일 삭제를 하였으므로, 저장함.
    )


- 2021. 05.07. 프로젝트 켈린더제작 (0%, 0.01%) - [ 프로젝트 켈린더 제작 시작 & 설계 ]
    1. 구조정리
    2. 적합한 켈린더 혹은 스케쥴러 찾기 그리고 적용시도
    3. 켈린더 후보들이였던 것들..
        (1) bootstrap-vue-argon-dashboard-master - fullcalendar 
            -> Pro로 업그레이드 해야함... 

        (2) jqwidgets-ver12.0.4
            -> 다양한 컴포넌트를 무료로 제공하면서, 굉장히 퀄리티가 뛰어남. 하지만, jquery? jqwidgets를 관려해서 알아야 해서 적용하기 힘듦.

        (3) MDB-Vue-master
            -> 무료라면서, 하나도 못쓰게해 놓았음..ㅡㅡ;

        (4) daykeep-calendar-quasar-master
            -> 데모 조차도 볼 수가 없었음.

        (5) EazyServer-Vue-Bootstrap-Calendar-5e26876
            -> 적용이 안되서 손절함.

        (6) Fullcalendar-master
            -> jQuery를 사용해야 함으로 손절함.
        
        (7) v-calendar-master
            -> 적용하기에는 기능이 너무 미흡함. 그리고 실행이 안됨.

        (8) 그 외 기타 등등...

        (9) 직접 만들기 or 더 찾아보기 or 권팀장님께 물어보기 or 풀켈린더 현질하기 or 풀켈린더 마스터해서 vue로 전부 옮기기
            -> 우선은, 직접 만들 각오로... 최종적으로 만들어낼 프로젝트표의 UI&UX를 디자인함.( 경로: /Frontend/public/img/plan/MainCalendar_Plan )
        
    4. jqwidgets, bootstrap-vue, vue 관련 조사
    5. calendar 적용 위치 파악 및 임시방편으로 <b-calendar> 적용    


- 2021. 05.10. 프로젝트 페이지 제작 (100%) - [ 프로젝트 페이지 제작 ]
    1. base-componet와 b-componet를 조화롭게 사용하여 완성함.


- 2021. 05.11. 프로젝트 추가 페이지 제작 (100%) - [ 프로젝트 추가 페이지 제작 ]
    1. /add의 프로젝트 추가 페이지 메인 제작
    2. /add의 프로젝트 추가 페이지의 설정-add 클릭 시 모달창 구현
    3. 설정-add 모달창 페이지 제작
    4. 설정-add 모달창 페이지 값과 뷰 컴포넌트 연결
    5. Clean Code











-----------------------------------------------------------------------------------------------
<!-- 각 구조 정리 및 설명 -->

// 확장자
yarn.lock: node_moudels가 너무 커서, 고안하여 탄생하게된 JavaScirpt 라이브러리 이다. 매우 가볍다고 한다.

.enc: 자바의 Final 처럼, 한번 지정해놓고 계속 전역으로 사용할 변수를 선언하게 해주는 파일 확장자 이다. 시스템 변수라고도 한다.

README.md: GitHub에서 사용되는 설명 파일의 확장자 명이다. 이 파일에는 라이브러리나 프레임워크에 대한 각 종 설명이 있다.

package.json: Json은 JavaScript로 데이터를 객체형태로 만들어 놓은 데이터 파일확장자 명이다. JSON은 데이터를 전송하기 위한 수단으로 탄생하게 되었다.

.postcssrc.js: 이는 css-loader 중에 일부인 것으로 알고있다. Javascript로 만들어져서 마지막은 .js이며 css를 sass의 집합형태로 만들기위해서 필용한 것으로 알고있다.

.gitignore: 이것은 github에 올리기 싫은 파일이나 폴더명을 적어서, 저장소에 깔끔하게 저장하기 위함이다. 깔끔하다는 것은 보기도 좋고 용량도 가볍다는 것 이다.

.gitattribues: 이것은 gitignore의 진화형태인 것 같다. 이전의 gitignore는 파일이나 폴더명을 썼다면, 이것은 경로를 써서 정리하고 저장한다.

.eslintrc.js: 이것은 es + lint = EcmaScript -> 즉, 자바스크립트를 의미하는 것이며, 에러가 있는 코드에 표시를 달아주는 파일이다.

.editorconfig: 많은 개발자들이 다양한 Editor나 IDE의 관계없이 일정한 코드 스타일을 유지하기 위해 도와주는 설정파일입니다. 파일 형태로 유지되며 읽기 쉽고 스타일에 대한 형상관리가 가능한 장점이 있습니다.
               라고 쓰여져 있지만.. 나는 왜 필요한지 모르겠다. 이 파일이 사라져도 기능은 정상으로 작동한다.

.vue: Vue는 JavaScirpt로 만들어진, 프론트엔드 라이브러리이자 프레임워크 이다. 설명은 생략하겠다.

.js: JavaScript는 프로그램 언어의 일종으로, 다양하게 사용된다. 이 프로젝트의 핵심이라고 할 수 있다.

.png/.jpg/.svg/.gif: 모두, 이미지의 확장자 이다. 이미지라고 생각하면 된다. 특별한게 있다면, favicon은 홈페이지의 icon을 가리키는 이름이다. 꼭, favicon일 필요는 없다.

.html: 마크업 언어의 일종의 View의 기본 베이스를 작성할 수 있도록 해준다.

.css: .html로 작성된 구조를 사용자가 보기좋게 꾸밀 수 있도록 해준다.


// 파일 & 폴더
WorkSpace: 프로젝트의 작업공간 이름이다.
    -> Backend: Express-generator를 사용하여 제작한 프로젝트이다. 주로, Server와 Database의 역할을 담당한다.
        -> bin: Server를 실행하는 폴더이다.
        -> node_modules: 사용가능한 모듈을 모두 모아놓은 폴더이다.
        -> public: 이곳에는 사용자의 요청에 따라 제공할 파일이 존재하는 곳 이다.
        -> routers: 이곳에서는 사용자의 요청을 받아서 그 요청을 수행하는 폴더이다.
        -> app.js: 모듈을 적용하고, 사용자요청을 받는 파일이다. 서버의 중계자 같은 역할을 한다.

    -> Frontend: Vue-cli를 사용하여 제작한 프로젝트이다. 주로, View의 역할을 담당한다.
        -> node_modules: 사용가능한 모듈을 모두 모아놓은 폴더이다.
        -> public: 사용자에게 전달해줄 가장 기본이되는 정적인 파일이 존재하는 곳 이다. ex) html, img
        -> src: 사용자에게 편리함을 제공해주게될 기능인 동적인(?) 파일이 존재하는 곳 이다. ex) routers, plugins, vue...
            -> assets: 뜻은 '자산'이라는 뜻으로, 주로, 이미지가 들어가 있는데 이 프로젝트에서는 css와 Logo 등의 파일이 있다.
            -> components: Vue컴포넌트 파일이 모여있는 폴더이다. 이곳에 있는 Vue 파일은 필요할 때 가져다 쓰는 파일들이다.
            -> directives: 모바일 화면으로 전환될 때, 나오는 메뉴바(?) 가 아닐까 생각한다.
            -> plugins: 대쉬보드같은 고급 기능을(?) 사용하기 위해서 모아놓은 모듈폴더 인 것 같다.
            -> routers: 이곳에서는 사용자의 요청을 받아서 그 요청을 수행하는 폴더이다. (중요)
            -> util: 알 수 는 없지만, 지레짐작으로 보건데 이 곳에는 애니메이션의 움직임 속도(?)를 조절하는 폴더인 것 같다.
            -> views: 프론트엔드의 핵심파일이 모두 모여있는 곳 이다. 실질적으로 사용자에게 보여지는 파일들이 존재한다. (중요)

     -> Develop-History: 이 프로젝트의 모든 설명과 일지가 포함되어있는 TXT형식의 파일이다.






